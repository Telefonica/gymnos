# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - devel
  paths:
    exclude:
    - docs/README.md
    - README.md

pool:
  name: 'default'

steps:
- script: |
    echo Generate documentation
    pip3 install sphinx sphinx-rtd-theme sphinx-argparse
    sphinx-build -b html docs/source docs/build
    sudo systemctl stop gymnos_rtd
    cp -r docs/build $(gymnosRTDPath)
    sudo systemctl start gymnos_rtd
  displayName: 'Documentation'
- script: |
    echo "Unit tests"
    pip3 install pytest pytest-cov pytest-mock requests-mock
    pip3 install .
    python3 -m pytest
  displayName: "Unit tests"
- script: |
    echo "Style guide"
    pip3 install flake8
    flake8
  displayName: "Style guide"
- script: |
    echo Generate docker images
    docker build -t $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName) -f Dockerfile .
    docker build -t $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName):gpu-latest -f Dockerfile.gpu .
  displayName: 'Generate docker images'
- script: |
    echo Push images to Telefonica artifactory
    docker login -u $(dockerId) -p $(dockerPassword) $(telefonicaDockerHubDomain)
    docker push $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName)
    docker push $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName):gpu-latest
  displayName: 'Push images to Telefonica artifactory'
- script: |
    echo Clean docker images from agent
    docker stop $(docker ps -a | grep gymnos | tr -s ' ' | cut -d ' ' -f 1)
    docker rm $(docker ps -a | grep gymnos | tr -s ' ' | cut -d ' ' -f 1)
    docker rmi $(docker images | grep gymnos | tr -s ' ' | cut -d ' ' -f 3)
  displayName: 'Agent cleaning'

