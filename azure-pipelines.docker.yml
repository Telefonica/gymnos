# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - devel
  paths:
    exclude:
    - docs/README.md
    - README.md

pool:
  name: 'default'

steps:
- script: |
    echo Generate documentation
    python3.6 -m pip install sphinx sphinx-rtd-theme sphinx-argparse flask numpy --user
    sphinx-build -b html docs/source docs/build
    sudo systemctl stop gymnos_rtd
    cp -r docs/build $(gymnosRTDPath)
    sudo systemctl start gymnos_rtd
  displayName: 'Generate documentation'
  condition: ne(variables['Build.Reason'], 'PullRequest')
- script: |
    echo Validate documentation
    python3.6 -m pip install sphinx sphinx-rtd-theme sphinx-argparse flask numpy --user
    tmp_dir=$(mktemp -d -t ci-XXXXXXXXXX)
    sphinx-build -W -b html docs/source $tmp_dir
  displayName: 'Validate documentation'
  condition: eq(variables['Build.Reason'], 'PullRequest')
- script: |
    echo "Style guide"
    python3.6 -m pip install flake8 --user
    python3.6 -m flake8
  displayName: "Style guide"
- script: |
    echo "Library installation"
    python3.6 -m pip install . --user
    python3.6 -m pip install .[tensorflow] --user
  displayName: "Library installation"
- script: |
    echo "Unit tests"
    python3.6 -m pip install pytest pytest-cov pytest-mock requests-mock pytest-azurepipelines --user
    python3.6 -m pytest
  displayName: "Unit tests"
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
- script: |
    echo "Integration tests"
    python3.6 -m pip install pytest pytest-cov pytest-mock requests-mock pytest-azurepipelines --user
    python3.6 -m pytest --integration
  displayName: "Integration tests"
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
- script: |
    echo Generate docker images
    docker build -t $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName) -f Dockerfile .
    docker build -t $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName):gpu-latest -f Dockerfile.gpu .
  displayName: 'Generate docker images'
  condition: ne(variables['Build.Reason'], 'PullRequest')
- script: |
    echo Push images to Telefonica artifactory
    docker login -u $(dockerId) -p $(dockerPassword) $(telefonicaDockerHubDomain)
    docker push $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName)
    docker push $(telefonicaDockerHubFullPath)/$(auraPrototypesRepo)/$(imageName):gpu-latest
  displayName: 'Push images to Telefonica artifactory'
  condition: ne(variables['Build.Reason'], 'PullRequest')
- script: |
    echo Clean docker images from agent
    docker stop $(docker ps -a | grep gymnos | tr -s ' ' | cut -d ' ' -f 1)
    docker rm $(docker ps -a | grep gymnos | tr -s ' ' | cut -d ' ' -f 1)
    docker rmi $(docker images | grep gymnos | tr -s ' ' | cut -d ' ' -f 3)
  displayName: 'Agent cleaning'
  condition: ne(variables['Build.Reason'], 'PullRequest')
